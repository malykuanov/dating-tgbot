import os
from difflib import SequenceMatcher
import logging

import telebot
from telebot import types

from django.conf import settings

from .models import City, Profile, ProfileSearch, User

bot = telebot.TeleBot(settings.TELEGRAM_TOKEN)


def gen_markup_for_city(name, is_search):
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    cities = City.objects.all()
    for city in cities:
        if SequenceMatcher(None, name, city.name).ratio() > 0.8:
            callback = 'search_' if is_search else ''
            markup.add(types.InlineKeyboardButton(
                f"{city.name}, {city.region}",
                callback_data=f"city_{callback}{city.pk}"
            ))
    markup.add(types.InlineKeyboardButton(
        f"ü§∑üèª‚Äç‚ôÇÔ∏è–ì–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ",
        callback_data="city_empty"
    ))
    return markup


def gen_markup_for_profile(user):
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        types.InlineKeyboardButton(
            f"üë§–ò–º—è",
            callback_data="profile_edit_name"
        ),
        types.InlineKeyboardButton(
            f"üî¢–í–æ–∑—Ä–∞—Å—Ç",
            callback_data="profile_edit_age"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            f"üöπ–ü–æ–ª",
            callback_data="profile_edit_sex"
        ),
        types.InlineKeyboardButton(
            f"üè†–ì–æ—Ä–æ–¥",
            callback_data="profile_edit_city"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            f"üñåÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ",
            callback_data="profile_edit_description"
        ),
        types.InlineKeyboardButton(
            f"üñº–§–æ—Ç–æ",
            callback_data="profile_edit_avatar"
        )
    )
    if user.profile.is_active:
        text_active = '‚úÖ–ê–Ω–∫–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞'
    else:
        text_active = '‚õî–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'
    markup.add(
        types.InlineKeyboardButton(
            text=text_active,
            callback_data="profile_edit_active"
        )
    )
    return markup


def gen_markup_for_profile_search():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        f"–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç",
        callback_data="search_age"
    ))
    markup.add(types.InlineKeyboardButton(
        f"–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª",
        callback_data="search_sex"
    ))
    markup.add(types.InlineKeyboardButton(
        f"–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥",
        callback_data="search_city"
    ))

    return markup


def gen_markup_for_age_search():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    age_range = [age for age in range(13, 55, 5)]
    for index in range(0, 8, 2):
        first_diapason = f'{age_range[index]}-{age_range[index+1]}'
        second_diapason = f'{age_range[index+1]}-{age_range[index + 2]}'
        markup.add(
            types.InlineKeyboardButton(
                text=first_diapason,
                callback_data=f'search_age_{first_diapason}'
            ),
            types.InlineKeyboardButton(
                text=second_diapason,
                callback_data=f'search_age_{second_diapason}'
            )
        )
    markup.add(
        types.InlineKeyboardButton(
            text=f'50-100',
            callback_data=f'search_age_50-100'
        ),
        types.InlineKeyboardButton(
            text='–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç',
            callback_data=f'search_age_13-100'
        )
    )
    return markup


def gen_markup_for_sex_search():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        types.InlineKeyboardButton(
            text=f'üï∫üèª',
            callback_data=f'search_sex_M'
        ),
        types.InlineKeyboardButton(
            text='üíÉüèª',
            callback_data=f'search_sex_F'
        )
    )
    return markup


def gen_main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row_width = 2
    markup.add(
        types.KeyboardButton(f"üîç–ü–æ–∏—Å–∫"),
        types.KeyboardButton(f"‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
    )
    markup.add(
        types.KeyboardButton(f"üòé–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    )

    return markup


def get_user_avatar(user):
    save_path = os.path.join(settings.MEDIA_ROOT, 'images/avatars/')
    file_name = f"{user.chat_id}.jpg"
    complete_name = os.path.join(save_path, file_name)

    with open(complete_name, "rb") as img:
        avatar = img.read()
        return avatar


def get_user_profile(user):
    text = f'<b>üë§–ò–º—è: </b>{user.profile.name}\n'
    text += f'<b>üî¢–í–æ–∑—Ä–∞—Å—Ç: </b>{user.profile.age}\n'
    if user.profile.sex == 'M':
        text += f'<b>üöπ–ü–æ–ª: </b> –ú—É–∂—á–∏–Ω–∞\n'
    else:
        text += f'<b>üö∫–ü–æ–ª: </b> –ñ–µ–Ω—â–∏–Ω–∞\n'
    if user.profile.city is None:
        text += f'<b>üè†–ì–æ—Ä–æ–¥: </b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n'
    else:
        text += f'<b>üè†–ì–æ—Ä–æ–¥: </b>{user.profile.city}\n'
    text += f'<b>üñåÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ: </b>{user.profile.description}\n\n'
    text += '<i>–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</i>\n'
    text += '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:'
    bot.send_photo(
        chat_id=user.chat_id,
        photo=get_user_avatar(user),
        caption=text,
        reply_markup=gen_markup_for_profile(user),
        parse_mode='HTML'
    )


def get_user_profile_search(user):
    text = f'<i>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</i>: \n\n'
    text += f'<b>üî¢–í–æ–∑—Ä–∞—Å—Ç: </b>{user.profilesearch.age}\n'
    if user.profilesearch.sex == 'M':
        text += f'<b>üöπ–ü–æ–ª: </b> –ú—É–∂—á–∏–Ω–∞\n'
    else:
        text += f'<b>üö∫–ü–æ–ª: </b> –ñ–µ–Ω—â–∏–Ω–∞\n'
    if user.profile.city is None:
        text += f'<b>üè†–ì–æ—Ä–æ–¥: </b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n'
    else:
        text += f'<b>üè†–ì–æ—Ä–æ–¥: </b>{user.profilesearch.city}\n\n'
    text += '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞: '

    return text


@bot.message_handler(commands=['test'])
def test_command(message):
    pass


@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        sticker_path = os.path.join(
            settings.STATIC_ROOT, 'tgbot/images/welcome.webp'
        )
        with open(sticker_path, 'rb') as sticker:
            bot.send_sticker(message.chat.id, sticker.read())
        user, created = User.objects.get_or_create(chat_id=message.chat.id)
        if created or not user.profile.is_registered:
            user.first_name = message.chat.first_name
            user.username = message.chat.username
            user.save()
            profile, _ = Profile.objects.get_or_create(user=user)
            profile_search, _ = ProfileSearch.objects.get_or_create(user=user)
            text = '<b>–ü—Ä–∏–≤–µ—Ç–∏–∫‚ò∫</b>\n\n'
            text += '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É.\n'

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                f"‚ù§Ô∏è–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã",
                callback_data="profile_registration"
            ))

            bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=markup,
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                chat_id=message.chat.id,
                text="–ö—É-–∫—ÉüôÇ",
                reply_markup=gen_main_markup(),
                parse_mode='HTML'
            )
    except Exception as ex:
        logging.error(str(ex))


@bot.message_handler(commands=['profile'])
def show_user_profile(message):
    try:
        user = User.objects.get(chat_id=message.chat.id)
        if user.profile.is_registered:
            get_user_profile(user)
        else:
            bot.send_message(
                chat_id=message.chat.id,
                text="–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/start"
            )
    except User.DoesNotExist as ex:
        bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –Ω–µ –∑–∞–≤–µ–ª–∏ –∞–Ω–∫–µ—Ç—É!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/start"
        )
    except Exception as ex:
        logging.error(ex)


@bot.message_handler(commands=['bug'])
def delete_profile(message):
    text = '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞</b>\n'
    text += '–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–∞–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞'
    message = bot.send_message(
        chat_id=message.chat.id,
        text=text,
        parse_mode='HTML'
    )
    bot.register_next_step_handler(message, process_bug_step)


@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == 'üòé–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
            show_user_profile(message)
        if message.text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞':
            user = User.objects.get(chat_id=message.chat.id)
            bot.send_message(
                chat_id=user.chat_id,
                text=get_user_profile_search(user),
                reply_markup=gen_markup_for_profile_search(),
                parse_mode='HTML'
            )


def process_name_step(message, user):
    try:
        name = message.text
        if len(name) > 20:
            bot.reply_to(
                message=message,
                text='–í–∞—à–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ 20 —Å–∏–º.'
            )
            bot.register_next_step_handler(message, process_name_step, user)
            return
        user.profile.name = name
        user.profile.save()
        bot.send_message(chat_id=message.chat.id, text='–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
        if user.profile.is_registered:
            show_user_profile(message)
        else:
            message = bot.reply_to(message, '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')
            bot.register_next_step_handler(message, process_age_step, user)
    except Exception as ex:
        logging.error(ex)


def process_age_step(message, user):
    try:
        age = message.text
        if not age.isdigit() or not 13 <= int(age) <= 100:
            message = bot.reply_to(
                message=message,
                text='–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 13 –¥–æ 100'
            )
            bot.register_next_step_handler(message, process_age_step, user)
            return
        user.profile.age = age
        user.profile.save()
        bot.send_message(chat_id=message.chat.id, text='–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        if user.profile.is_registered:
            show_user_profile(message)
        else:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                               resize_keyboard=True)
            markup.add('–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞')
            message = bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª',
                                   reply_markup=markup)
            bot.register_next_step_handler(message, process_sex_step, user)
    except Exception as ex:
        logging.error(ex)


def process_sex_step(message, user):
    try:
        sex = message.text
        if sex == '–ú—É–∂—á–∏–Ω–∞':
            user.profile.sex = 'M'
            user.profilesearch.sex = 'F'
        elif sex == '–ñ–µ–Ω—â–∏–Ω–∞':
            user.profile.sex = 'F'
            user.profilesearch.sex = 'M'
        else:
            message = bot.reply_to(
                message=message,
                text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–ú—É–∂—á–∏–Ω–∞ / –ñ–µ–Ω—â–∏–Ω–∞)'
            )
            bot.register_next_step_handler(message, process_sex_step, user)
            return
        user.profile.save()
        user.profilesearch.save()
        if user.profile.is_registered:
            bot.send_message(
                chat_id=message.chat.id,
                text='–ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!',
                reply_markup=gen_main_markup()
            )
        else:
            bot.send_message(
                chat_id=message.chat.id,
                text='–ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!',
                reply_markup=types.ReplyKeyboardRemove()
            )
            message = bot.send_message(
                chat_id=message.chat.id,
                text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥',
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(message, process_city_step)
    except Exception as ex:
        logging.error(ex)


def process_city_step(message, is_search=False):
    try:
        city = message.text
        text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:</b>\n'
        text += '(–≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –Ω/–ø —Å —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é <u>–±–æ–ª–µ–µ 1000 —á.</u>)\n\n'
        bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=gen_markup_for_city(city, is_search),
            parse_mode='HTML'
        )
    except Exception as ex:
        logging.error(ex)


def process_description_step(message, user):
    try:
        description = message.text
        if len(description) > 400:
            message = bot.reply_to(
                message=message,
                text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ 400 —Å–∏–º.'
            )
            bot.register_next_step_handler(message, process_description_step,
                                           user)
            return
        user.profile.description = description
        user.profile.save()
        bot.send_message(chat_id=message.chat.id, text='–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
        if user.profile.is_registered:
            show_user_profile(message)
        else:
            message = bot.reply_to(message, '–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ')
            bot.register_next_step_handler(message, process_photo_step, user)
    except Exception as ex:
        logging.error(ex)


def process_photo_step(message, user):
    try:
        file_id = message.photo[-1].file_id
        file = bot.get_file(file_id)
        user_avatar = bot.download_file(file.file_path)
        save_path = os.path.join(settings.MEDIA_ROOT, 'images/avatars/')
        file_name = f"{user.chat_id}.jpg"
        complete_name = os.path.join(save_path, file_name)

        with open(complete_name, "wb") as img:
            img.write(user_avatar)

        bot.send_message(chat_id=message.chat.id, text='–§–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')

        if user.profile.is_registered:
            show_user_profile(message)
        else:
            user.profile.is_registered = True
            user.profile.save()
            text = '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!</b> –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n'
            text += '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n'
            text += '/profile –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"'
            bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=gen_main_markup(),
                parse_mode='HTML'
            )
    except TypeError:
        message = bot.reply_to(
            message=message,
            text='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: PNG/JPG\n(compress/—Å–∂–∞—Ç–æ–µ)'
        )
        bot.register_next_step_handler(message, process_photo_step, user)
    except Exception as ex:
        logging.error(ex)


def process_bug_step(message):
    try:
        bug = message.text
        text = '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüëç</b>\n'
        text += '–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!'
        bot.reply_to(
            message=message,
            text=text,
            parse_mode='HTML'
        )

        logging.warning(f'BUG from {message.chat.id}: {bug}')
    except Exception as ex:
        logging.error(ex)


@bot.callback_query_handler(func=lambda call: call.data.startswith('city_'))
def callback_set_city(call):
    try:
        bot.edit_message_reply_markup(call.from_user.id,
                                      call.message.message_id)

        user = User.objects.get(chat_id=call.from_user.id)
        text = ""

        if call.data == 'city_empty':
            text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞</b>\n'
            text += '–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É—Ç–µ–π –∫–æ–º–∞–Ω–¥–æ–π /bug –∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ'
            if user.profile.city is None:
                user.profile.city = City.objects.get(name='–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
                user.profilesearch.city = user.profile.city
        else:
            city_pk = call.data.split('_')[-1]
            if call.data.startswith('city_search'):
                user.profilesearch.city = City.objects.get(pk=city_pk)
                text = '<b>–ì–æ—Ä–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n'
            else:
                user.profile.city = City.objects.get(pk=city_pk)
                user.profilesearch.city = user.profile.city
                text = '<b>–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n'

                if user.profile.is_registered:
                    show_user_profile(call.message)

        user.profile.save()
        user.profilesearch.save()

        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id)

        if not user.profile.is_registered:
            message = bot.send_message(
                chat_id=call.from_user.id,
                text='–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –¥–æ 400 —Å–∏–º.'
            )
            bot.register_next_step_handler(message, process_description_step,
                                           user)

    except Exception as ex:
        logging.error(ex)


@bot.callback_query_handler(func=lambda call: call.data.startswith('profile_'))
def callback_change_profile(call):
    try:
        bot.edit_message_reply_markup(
            chat_id=call.from_user.id,
            message_id=call.message.message_id
        )
        text = ""
        user = User.objects.get(chat_id=call.from_user.id)

        if call.data == 'profile_registration':
            bot.send_message(
                chat_id=call.from_user.id,
                text="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
            )
            bot.register_next_step_handler(call.message, process_name_step,
                                           user)
            bot.answer_callback_query(call.id)
            return

        if call.data == 'profile_edit_name':
            bot.send_message(
                chat_id=call.from_user.id,
                text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            bot.register_next_step_handler(call.message, process_name_step,
                                           user)
            bot.answer_callback_query(call.id)
            return
        if call.data == 'profile_edit_age':
            bot.send_message(
                chat_id=call.from_user.id,
                text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
            )
            bot.register_next_step_handler(call.message, process_age_step,
                                           user)
            bot.answer_callback_query(call.id)
            return
        if call.data == 'profile_edit_sex':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                               resize_keyboard=True)
            markup.add('–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞')
            bot.send_message(
                chat_id=call.from_user.id,
                text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=markup
            )
            bot.register_next_step_handler(call.message, process_sex_step,
                                           user)
            bot.answer_callback_query(call.id)
            return
        if call.data == 'profile_edit_city':
            bot.send_message(
                chat_id=call.from_user.id,
                text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"
            )
            bot.register_next_step_handler(call.message, process_city_step)
            bot.answer_callback_query(call.id)
            return
        if call.data == 'profile_edit_description':
            bot.send_message(
                chat_id=call.from_user.id,
                text="–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
            )
            bot.register_next_step_handler(call.message,
                                           process_description_step,
                                           user)
            bot.answer_callback_query(call.id)
            return
        if call.data == 'profile_edit_avatar':
            bot.send_message(
                chat_id=call.from_user.id,
                text="–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:"
            )
            bot.register_next_step_handler(call.message, process_photo_step,
                                           user)
            bot.answer_callback_query(call.id)
            return
        if call.data == 'profile_edit_active':
            user.profile.is_active = not user.profile.is_active
            user.profile.save()
            show_user_profile(call.message)
            bot.answer_callback_query(call.id, '–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω')
            return

    except User.DoesNotExist:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text="–í—ã –Ω–µ –∑–∞–≤–µ–ª–∏ –∞–Ω–∫–µ—Ç—É!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/start"
        )
    except Exception as ex:
        logging.error(ex)


@bot.callback_query_handler(func=lambda call: call.data.startswith('search_'))
def callback_change_profile_search(call):
    try:

        user = User.objects.get(chat_id=call.from_user.id)
        text = markup = None

        if call.data == 'search_age':
            text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω</b>: '
            markup = gen_markup_for_age_search()
            bot.answer_callback_query(call.id)
        if call.data.startswith('search_age_'):
            user.profilesearch.age = call.data.split('_')[-1]
            user.profilesearch.save()
            text = get_user_profile_search(user)
            markup = gen_markup_for_profile_search()

        if call.data == 'search_sex':
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'
            markup = gen_markup_for_sex_search()
        if call.data.startswith('search_sex_'):
            user.profilesearch.sex = call.data.split('_')[-1]
            user.profilesearch.save()
            text = get_user_profile_search(user)
            markup = gen_markup_for_profile_search()

        if call.data == 'search_city':
            bot.delete_message(
                chat_id=call.from_user.id,
                message_id=call.message.message_id
            )
            bot.send_message(
                chat_id=call.from_user.id,
                text='<b>–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:</b> ',
                parse_mode='HTML'
            )
            is_search = True
            bot.register_next_step_handler(call.message, process_city_step,
                                           is_search)
            bot.answer_callback_query(call.id)
            return

        bot.edit_message_text(
            text=text,
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            parse_mode='HTML'
        )
        bot.edit_message_reply_markup(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        return

    except User.DoesNotExist:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text="–í—ã –Ω–µ –∑–∞–≤–µ–ª–∏ –∞–Ω–∫–µ—Ç—É!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/start"
        )
    except Exception as ex:
        logging.error(ex)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    pass
